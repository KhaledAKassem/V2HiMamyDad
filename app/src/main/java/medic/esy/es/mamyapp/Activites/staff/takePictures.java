package medic.esy.es.mamyapp.Activites.staff;import android.Manifest;import android.content.ContentResolver;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.provider.MediaStore;import android.support.annotation.NonNull;import android.support.v4.app.ActivityCompat;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.support.v4.content.FileProvider;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.webkit.MimeTypeMap;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.Toast;import com.bumptech.glide.Glide;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.OnProgressListener;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import java.io.File;import java.io.IOException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import medic.esy.es.mamyapp.Activites.model.upload;import medic.esy.es.mamyapp.R;public class takePictures extends Fragment {    private static final int PicImageRequest = 1;    private Button buttonChoose;    private Button buttonUpload;    private EditText getcode;    private ImageView imageView;    private ProgressBar progressBar;    private Uri ImageUri;    private StorageReference storageReference;    private DatabaseReference databaseReference;    private EditText etAction;    String imageFilePath;    public static final int PICK_IMAGE = 100;    public static final int REQUEST_PERMISSION=200;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(LayoutInflater inflater, final ViewGroup container,                             Bundle savedInstanceState) {        View root = inflater.inflate(R.layout.fragment_take_pictures, container, false);        buttonChoose = (Button) root.findViewById(R.id.opencamera);        buttonUpload = (Button) root.findViewById(R.id.uploadImage);        getcode = (EditText) root.findViewById(R.id.etchildcode);        imageView = (ImageView) root.findViewById(R.id.mychildphoto);        progressBar = (ProgressBar) root.findViewById(R.id.progressbar);        storageReference = FirebaseStorage.getInstance().getReference("uploads");        databaseReference = FirebaseDatabase.getInstance().getReference("childernPhoto");        buttonChoose.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if(ContextCompat.checkSelfPermission(getActivity(), android.Manifest.permission.WRITE_EXTERNAL_STORAGE)!=PackageManager.PERMISSION_GRANTED){                    ActivityCompat.requestPermissions(getActivity(),new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUEST_PERMISSION);                }               openCameraIntent();            }        });        buttonUpload.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                String getdata = getcode.getText().toString().trim();                if (getdata.length() == 0) {                    getcode.setError("Code is Required");                    getcode.requestFocus();                    return;                } else {                    Toast.makeText(getActivity(), "start Uploading pls wait ...", Toast.LENGTH_SHORT).show();                    uploadFile();                }            }        });        return root;    }    private void uploadFile() {        if (ImageUri != null) {            final StorageReference fileRef = storageReference.child(System.currentTimeMillis() + "." + getFileExtension(ImageUri));            fileRef.putFile(ImageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {                @Override                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {                    Handler handler = new Handler();                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            progressBar.setProgress(0);                        }                    }, 4000);                    fileRef.getDownloadUrl().addOnCompleteListener(new OnCompleteListener<Uri>() {                        @Override                        public void onComplete(@NonNull Task<Uri> task) {                            String downloadUrl = task.getResult().toString();                            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");                            Date date = new Date();                            String day = date.toString();                            upload upload = new upload(downloadUrl, day);                            databaseReference.child(getcode.getText().toString().trim()).setValue(upload);                        }                    });                    Toast.makeText(getActivity(), "Upload Successfully", Toast.LENGTH_SHORT).show();                    buttonUpload.setEnabled(true);                }            }).addOnFailureListener(new OnFailureListener() {                @Override                public void onFailure(@NonNull Exception e) {                    Toast.makeText(getActivity(), e.getMessage(), Toast.LENGTH_SHORT).show();                }            }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {                @Override                public void onProgress(UploadTask.TaskSnapshot taskSnapshot) {                    double progress = (100.0 * taskSnapshot.getBytesTransferred() / taskSnapshot.getTotalByteCount());                    progressBar.setProgress((int) progress);                }            });        } else {            Toast.makeText(getActivity(), "No file selected", Toast.LENGTH_SHORT).show();        }    }    private String getFileExtension(Uri uri) {        ContentResolver cr = getActivity().getContentResolver();        MimeTypeMap mime = MimeTypeMap.getSingleton();        return mime.getExtensionFromMimeType(cr.getType(uri));    }//    private void openfilechooser() {//        Intent m_intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);//        File file = new File(Environment.getExternalStorageDirectory(), "khaled");//        Uri uri = FileProvider.getUriForFile(getContext(), getContext().getApplicationContext().getPackageName() + ".provider", file);//        m_intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, uri);//        startActivityForResult(m_intent, PicImageRequest);//    }////    @Override//    public void onActivityResult(int requestCode, int resultCode, Intent data) {//        super.onActivityResult(requestCode, resultCode, data);////        switch (requestCode) {////            //TODO... onCamera Picker Result//            case PicImageRequest://                if (resultCode == getActivity().RESULT_OK) {////                    //File object of camera image//                    File file = new File(Environment.getExternalStorageDirectory(), "khaled");////                    //Uri of camera image//                    ImageUri = FileProvider.getUriForFile(getContext(), getContext().getApplicationContext().getPackageName() + ".provider", file);////                }//                break;//        }//    }    private void openCameraIntent() {        Intent pictureIntent = new Intent(                MediaStore.ACTION_IMAGE_CAPTURE);        if(pictureIntent.resolveActivity(getActivity().getPackageManager()) != null){            //Create a file to store the image            File photoFile = null;            try {                photoFile = createImageFile();            } catch (IOException e) {                e.printStackTrace();            }            if (photoFile != null) {                Uri photoURI = FileProvider.getUriForFile(getActivity(),getActivity().getPackageName()+".provider", photoFile);                pictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,                        photoURI);                startActivityForResult(pictureIntent,                        PICK_IMAGE);            }        }    }    private File createImageFile() throws IOException {        String timeStamp =                new SimpleDateFormat("yyyyMMdd_HHmmss",                        Locale.getDefault()).format(new Date());        String imageFileName = "IMG_" + timeStamp + "_";        File storageDir =                getActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES);        File image = File.createTempFile(                imageFileName,  /* prefix */                ".jpg",         /* suffix */                storageDir      /* directory */        );        imageFilePath = image.getAbsolutePath();        return image;    }    @Override    public void onActivityResult(int requestCode, int resultCode,                                 Intent data) {        if (requestCode == PICK_IMAGE) {            //don't compare the data to null, it will always come as  null because we are providing a file URI, so load with the imageFilePath we obtained before opening the cameraIntent            Glide.with(this).load(imageFilePath).into(imageView);            ImageUri=(Uri.fromFile(new File(imageFilePath)));            // If you are using Glide.        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if(requestCode==REQUEST_PERMISSION&&grantResults.length>0){            if(grantResults[0]==PackageManager.PERMISSION_GRANTED){                Toast.makeText(getActivity(),"Permission ganted",Toast.LENGTH_SHORT);            }        }    }}